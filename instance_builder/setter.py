from typing import Callable, TypeVar
from .lib import find_attributes


T = TypeVar("T")


def setter(Class: type) -> type:
    """Setter method generator

    Setter methods are generated by decorating class with this function.

    Args:
        Class (type): Class which you want to generate setter methods.

    Returns:
        type: Class having setter methods for its private fields.

    Examples:
        @setter
        class User:
            __id: int = 0
            __name: str = "Shuntaro Shimizu"

        user = User()
        user.set_id(1)  # user._User__id == 1
        user.set_name("New Name")  # user._User__name == "New Name"
    """
    def generate_setter(name: str) -> Callable[T, None]:
        def set_value(self, value: T) -> None:
            setattr(self, name, value)
        return set_value

    for attribute in find_attributes(Class):
        setter_name = "set_" + attribute.replace(f"_{Class.__name__}__", "")
        setattr(Class, setter_name, generate_setter(attribute))

    return Class
