from typing import Callable, TypeVar
from .lib import find_attributes


T = TypeVar("T")


def getter(Class: type) -> type:
    """Getter method generator

    Getter methods are generated by decorating class with this function.

    Args:
        Class (type): Class which you want to generate getter methods.

    Returns:
        type: Class having getter methods for its private fields.

    Examples:
        @getter
        class User:
            __id: int = 0
            __name: str = "Shuntaro Shimizu"

        user = User()
        user.get_id()  # 0
        user.get_name()  # "Shuntaro Shimizu"
    """
    def generate_getter(name: str) -> Callable[Class, T]:
        def get_value(self) -> T:
            return getattr(self, name)
        return get_value

    for attribute in find_attributes(Class):
        getter_name = "get_" + attribute.replace(f"_{Class.__name__}__", "")
        setattr(Class, getter_name, generate_getter(attribute))

    return Class
